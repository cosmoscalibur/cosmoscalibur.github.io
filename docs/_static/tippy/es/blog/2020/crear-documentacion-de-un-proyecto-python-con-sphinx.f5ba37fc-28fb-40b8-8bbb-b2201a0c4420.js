selector_to_html = {"a[href=\"#publicar\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Publicar<a class=\"headerlink\" href=\"#publicar\" title=\"Link to this heading\">#</a></h2><p>Ahora encontrar\u00e1s en la carpeta <em>build</em> los archivos LaTeX, y uno de ellos ser\u00e1\nel PDF que queremos. Tambi\u00e9n puedes hacer compilaci\u00f3n HTML (<code class=\"code docutils literal notranslate\"><span class=\"pre\">make</span> <span class=\"pre\">html</span></code>)\ny usar esta para publicar como un <a class=\"reference external\" href=\"https://pages.github.com/\">GitHub Pages</a> o\nen <a class=\"reference external\" href=\"https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html\">ReadTheDocs</a>.</p>", "a[href=\"#configuracion-de-sphinx\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configuraci\u00f3n de Sphinx<a class=\"headerlink\" href=\"#configuracion-de-sphinx\" title=\"Link to this heading\">#</a></h2><p>Abriremos una consola (si es Windows, debes tener en cuenta que para usar\npaquetes de Anaconda debes usar las consolas Anaconda Prompt, Anaconda\nPowerShell u otra si la configuraste -como el caso de Git Bash que\nmencion\u00e9 en la secci\u00f3n anterior-) y debemos ubicarnos en el directorio que\ndestinaremos para la documentaci\u00f3n. Es habitual que en la estructura de nuestro\nproyecto destinemos un directorio <code class=\"code docutils literal notranslate\"><span class=\"pre\">docs</span></code> para este fin.</p><p>Ahora ejecutamos <code class=\"code docutils literal notranslate\"><span class=\"pre\">sphinx-quickstart</span></code> y respondemos las preguntas que\nsaldr\u00e1n. Es necesario tener en cuenta, que si usas Windows debes agregar al\ncomando la terminaci\u00f3n <code class=\"code docutils literal notranslate\"><span class=\"pre\">.exe</span></code>, ejemplo <code class=\"code docutils literal notranslate\"><span class=\"pre\">sphinx-quickstart.exe</span></code>.</p>", "a[href=\"#crear-documentacion-de-un-proyecto-python-con-sphinx\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Crear documentaci\u00f3n de un proyecto Python con Sphinx<a class=\"headerlink\" href=\"#crear-documentacion-de-un-proyecto-python-con-sphinx\" title=\"Link to this heading\">#</a></h1><p>Sin duda, una etapa importante en cualquier proyecto de desarrollo (y no solo\nde <em>software</em>) es la generaci\u00f3n de la documentaci\u00f3n. En el caso de <em>software</em>\nes posible asistirse de herramientas que ayudan a automatizar la generaci\u00f3n de\nla documentaci\u00f3n mediante extracci\u00f3n de comentarios en el c\u00f3digo, usar palabras\nclaves y lenguaje de marcado para modificaci\u00f3n de estilo en el texto o\ninclusi\u00f3n de otros elementos que no sean solo texto plano (im\u00e1genes,\necuaciones, enlaces entre otros).</p><p>Algunas herramientas para este fin son <a class=\"reference external\" href=\"http://doxygen.nl/\">Doxygen</a>\n(habitual para proyectos en C/C++), <a class=\"reference external\" href=\"https://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html\">Javadoc</a>\n(para Java, pero habitual tambi\u00e9n en TypeScript), <a class=\"reference external\" href=\"https://esdoc.org/\">ESDoc</a>\n(para Javascript) y por supuesto, Sphinx, para Python.</p>", "a[href=\"#sphinx\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Sphinx<a class=\"headerlink\" href=\"#sphinx\" title=\"Link to this heading\">#</a></h2><p>Si usamos Python a trav\u00e9s de Anaconda podemos usar el gestor <em>conda</em> para la\ninstalaci\u00f3n, as\u00ed <code class=\"code docutils literal notranslate\"><span class=\"pre\">conda</span> <span class=\"pre\">install</span> <span class=\"pre\">sphinx</span></code>, en caso contrario, podemos usar\nel gestor de paquetes <em>PIP</em>: <code class=\"code docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">-U</span> <span class=\"pre\">Sphinx</span></code>.</p>", "a[href=\"#que-archivos-debo-editar\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">\u00bfQu\u00e9 archivos debo editar?<a class=\"headerlink\" href=\"#que-archivos-debo-editar\" title=\"Link to this heading\">#</a></h3><p>Primero, editaremos <code class=\"code docutils literal notranslate\"><span class=\"pre\">docs/source/index.rst</span></code>, donde deberemos agregar los\nnombres de los archivos que se incluyen en la documentaci\u00f3n, tanto los\ngenerados como los autom\u00e1ticos. Se agrega uno por l\u00ednea, sin extensi\u00f3n y la\nposici\u00f3n es relativa a la ubicaci\u00f3n del archivo <code class=\"code docutils literal notranslate\"><span class=\"pre\">index.rst</span></code>.</p><p>Te recomiendo siempre un archivo <code class=\"code docutils literal notranslate\"><span class=\"pre\">README.rst</span></code> que fija la generalidad e\nintenci\u00f3n del proyecto, <code class=\"code docutils literal notranslate\"><span class=\"pre\">history.rst</span></code> para tener documentados los cambios\nentre versiones (como un <em>changelog</em> pero a mano, m\u00e1s condensado), un\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">usage.rst</span></code> documentando el uso de nuestro proyecto,\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">installation.rst</span></code> con instrucciones de instalaci\u00f3n y adicional, agregar\nuna ruta a la documentaci\u00f3n de la API (la misma ruta la debemos indicar m\u00e1s\nadelante). Puedes agregar m\u00e1s archivos, por ejemplo, yo suelo usar un\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">concepts.rst</span></code> para detallar los conceptos necesarios antes de usar el\nsoftware o detallar teor\u00eda que ayuda a interpretar resultados o que expande la\ninformaci\u00f3n para que alguien pueda analizar o continuar un desarrollo.</p>", "a[href=\"#latex\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">LaTeX<a class=\"headerlink\" href=\"#latex\" title=\"Link to this heading\">#</a></h2><p>Si deseamos generar documentaci\u00f3n web, este paquete no es necesario, pero para\ngenerar nuestra documentaci\u00f3n en PDF es una dependencia obligatoria. La\ninstalaci\u00f3n recomendada depender\u00e1 del sistema operativo que se use.</p>", "a[href=\"#escritura-en-restructuredtext\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Escritura en ReStructuredText<a class=\"headerlink\" href=\"#escritura-en-restructuredtext\" title=\"Link to this heading\">#</a></h2><p>Sobre esto, es referencia ver la documentaci\u00f3n de\n<a class=\"reference external\" href=\"https://docutils.readthedocs.io/en/sphinx-docs/user/rst/quickstart.html\">DocUtils</a>\ny de Sphinx <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html\">ReStructuredText Primer</a>.</p><p>Una vez tienes las bases de ReStructuredText puedes editar lo b\u00e1sico. De ah\u00ed, y\npara tener todo el provecho de Sphinx hay elementos como los roles, directivas\ny dominios que debes aprender a usar,\n<a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html\">Sphinx ReStructuredText</a>.</p>", "a[href=\"#ejecucion-de-sphinx\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Ejecuci\u00f3n de Sphinx<a class=\"headerlink\" href=\"#ejecucion-de-sphinx\" title=\"Link to this heading\">#</a></h2><p>Como estamos haciendo uso de <em>autodoc</em>, nuestro primer paso es generar la\nextracci\u00f3n de la API.</p>", "a[href=\"#importar-paquete\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Importar paquete<a class=\"headerlink\" href=\"#importar-paquete\" title=\"Link to this heading\">#</a></h3><p>Para apoyarte de ejemplos actualizados autom\u00e1ticamente, uso de metadatos desde\nel c\u00f3digo (ejemplo, el autor o la versi\u00f3n) puedes importar el paquete en el\narchivo de configuraci\u00f3n. Dado que estar\u00e1s en modo de desarrollo probablemente,\nel paquete no ha sido instalado y lo deber\u00e1s hacer descomentando las tres\nprimeras l\u00edneas de c\u00f3digo en la secci\u00f3n de <em>Path setup</em>. El punto que hay por\ndefecto indica la misma carpeta de <code class=\"code docutils literal notranslate\"><span class=\"pre\">docs/source</span></code>, por lo cual es\nnecesario reemplazar por <code class=\"code docutils literal notranslate\"><span class=\"pre\">../..</span></code> que se devuelve los dos niveles\nnecesarios.</p>", "a[href=\"#id1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">LaTeX<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>Hay una configuraci\u00f3n b\u00e1sica para LaTeX que puedes agregar. El documento\nmaestro, el nombre del archivo TeX, el nombre que nuestra documentaci\u00f3n, el\nnombre del autor (que podemos usar la variable que ya definimos) y el tipo de\ndocumento (cuya clase <em>manual</em> est\u00e1 definida por Sphinx).</p>", "a[href=\"#referencias-cruzadas\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Referencias cruzadas<a class=\"headerlink\" href=\"#referencias-cruzadas\" title=\"Link to this heading\">#</a></h3><p>Para usar referencias cruzadas, es decir, numeraci\u00f3n de tablas, figuras,\nc\u00f3digos y ecuaciones si poseen pie de objeto, y ser referenciados en el texto\npor el n\u00famero, se requiere configurar lo siguiente.</p>", "a[href=\"#extensiones\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Extensiones<a class=\"headerlink\" href=\"#extensiones\" title=\"Link to this heading\">#</a></h3><p>Recomiendo incluir la extensi\u00f3n de Autodoc para extraer autom\u00e1ticamente la\ndocumentaci\u00f3n de la API, MathJax para el soporte de ecuaciones matem\u00e1ticas en\nla versi\u00f3n Web y Napoleon para el estilo de Numpy y Google en la documentaci\u00f3n.\nCon Coverage puedes validar que funciones se han documentado y dcotest integra\npruebas de c\u00f3digo desde la documentaci\u00f3n (comparar salidas con ejemplo de\ndocumentaci\u00f3n).</p><p>Modificar en el archivo.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
