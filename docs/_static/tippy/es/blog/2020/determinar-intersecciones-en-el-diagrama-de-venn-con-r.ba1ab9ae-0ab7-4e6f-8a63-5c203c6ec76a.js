selector_to_html = {"a[href=\"#instalacion\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instalaci\u00f3n<a class=\"headerlink\" href=\"#instalacion\" title=\"Link to this heading\">#</a></h2><p>Por el momento, se debe instalar el paquete a partir de GitHub, por lo cual debes usar la utilidad incluida en <code class=\"docutils literal notranslate\"><span class=\"pre\">devtools</span></code> en lugar del mecanismo de instalaci\u00f3n habitual (ya est\u00e1 sometido el paquete, as\u00ed que en el futura podr\u00eda usarse).</p><p>Si usas Anaconda en Linux, probablemente debas configurar la ruta del ejecutable de <code class=\"docutils literal notranslate\"><span class=\"pre\">tar</span></code> (al instalar desde GitHub genera un error indicando que no encuentra el ejecuta <code class=\"docutils literal notranslate\"><span class=\"pre\">sh:</span> <span class=\"pre\">1:</span> <span class=\"pre\">/bin/gtar:</span> <span class=\"pre\">not</span> <span class=\"pre\">found</span></code>).</p>", "a[href=\"#lectura-de-archivos\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Lectura de archivos<a class=\"headerlink\" href=\"#lectura-de-archivos\" title=\"Link to this heading\">#</a></h3><p>Para leer los archivos, he creado una funci\u00f3n espec\u00edfica para la lectura, de manera que el contenido de los archivos sea cargado a arreglos de caracteres y estos se anexan a una lista. Adicional, se asocian los nombres personalizados a los conjuntos de elementos de cada archivo.</p><p>Las rutas a los archivos y los nombres que asociaremos, se agregan como\narreglos de caracteres, y tiene soporte gen\u00e9rico para una cantidad diferente\na la ilustrada.</p>", "a[href=\"#r-venn-1\"]": "<figure class=\"align-center\" id=\"r-venn-1\">\n<img alt=\"Diagrama de Venn generado para los 3 conjuntos.\" src=\"../../../../_images/primes_even_fibo.png\"/>\n<figcaption>\n<p><span class=\"caption-text\">Diagrama de Venn generado para los 3 conjuntos.</span><a class=\"headerlink\" href=\"#r-venn-1\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#determinar-elementos\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Determinar elementos<a class=\"headerlink\" href=\"#determinar-elementos\" title=\"Link to this heading\">#</a></h3><p>Ya con los conjuntos cargados en la lista, podemos determinar los elementos que van en cada \u00e1rea del diagrama de Venn (intersecciones y espec\u00edficos).</p>", "a[href=\"#determinar-intersecciones-en-el-diagrama-de-venn-con-r\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Determinar intersecciones en el diagrama de Venn con R<a class=\"headerlink\" href=\"#determinar-intersecciones-en-el-diagrama-de-venn-con-r\" title=\"Link to this heading\">#</a></h1><p>Esta entrada es mi primera entrada asociada al lenguaje R y sobre mi primer paquete en R: <a class=\"reference external\" href=\"https://github.com/cosmoscalibur/venn.compute\"><code class=\"docutils literal notranslate\"><span class=\"pre\">venn.compute</span></code></a>. Este paquete surge por un caso de uso particular que estaba ayudando a automatizar de determinar los elementos (no solo el dibujo ni la cantidad) de las intersecciones y espec\u00edficos de un diagrama de Venn, \u00fatil en bioinform\u00e1tica para comparaci\u00f3n de genes.</p><p>As\u00ed, esta entrada es tipo tutorial de como usar el paquete que hice para este fin.</p>", "a[href=\"#graficar-diagrama-de-venn\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Graficar diagrama de Venn<a class=\"headerlink\" href=\"#graficar-diagrama-de-venn\" title=\"Link to this heading\">#</a></h3><p>Para obtener el diagrama tengo una funci\u00f3n que define un flujo por defecto que crea los archivos del paso anterior y adicional el gr\u00e1fico del diagrama con el paquete <a class=\"reference external\" href=\"https://cran.r-project.org/web/packages/VennDiagram/index.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">VennDiagram</span></code></a>.</p>", "a[href=\"#caso-de-uso\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Caso de uso<a class=\"headerlink\" href=\"#caso-de-uso\" title=\"Link to this heading\">#</a></h2><p>Se posee la informaci\u00f3n de m\u00faltiples conjuntos en archivos de texto plano, en donde cada elemento es una l\u00ednea de dicho archivo. No siempre es la misma cantidad de conjuntos y se desea poder generar archivos de salida para revisar las intersecciones y elementos espec\u00edficos. Usualmente, puede importar el gr\u00e1fico por lo cual se puede incluir.</p><p>Como ejemplo se usar\u00e1n 3 archivos ubicados en una carpeta <code class=\"docutils literal notranslate\"><span class=\"pre\">tests</span></code>, con los nombres <code class=\"docutils literal notranslate\"><span class=\"pre\">primes.txt</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">even.txt</span></code> y <code class=\"docutils literal notranslate\"><span class=\"pre\">fibo.txt</span></code> con el contenido de los n\u00fameros primos, pares y de Fibonacci hasta el 20.</p>", "a[href=\"#ejecucion\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Ejecuci\u00f3n<a class=\"headerlink\" href=\"#ejecucion\" title=\"Link to this heading\">#</a></h2><p>Lo primero que debemos hacer es cargar el paquete.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
